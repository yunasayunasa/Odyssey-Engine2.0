AI向け仕様書 (GEMINI INTERNAL SPECIFICATION) - Odyssey Engine v2.0
目的: このドキュメントは、Odyssey Engineの内部アーキテクチャ、データフロー、およびコンポーネント間の相互作用を、AIが最大限に理解し、将来的な機能拡張やデバッグ、特にノベル以外のゲームジャンルとのシームレスな連携を効率的に支援するためのものです。人間が読むことよりも、AIによる機械的・論理的解釈の最適化を優先します。

1.0 Core Architecture & System Lifecycle
VIEWPORT: 1280x720, Phaser.Scale.FIT.
GLOBAL SINGLETONS (CRITICAL):
StateManager: ゲームの状態 (f, sf変数) を保持する唯一のソース。Phaser.Events.EventEmitterを継承し、変数の変更をグローバルに通知する。PreloadSceneで生成され、Phaser.Registryに登録される。
ConfigManager: ゲームの設定を保持する唯一のソース。PreloadSceneで生成され、Phaser.Registryに登録される。
SCENE LIFECYCLE MANAGEMENT (CRITICAL - CENTRALIZED VIA SystemScene):
BOOTSTRAP SEQUENCE:
main.js: PreloadSceneのみをactive: trueで起動。他は全てactive: false。
PreloadScene:
全てのアセットをロード。ConfigManagerとStateManagerを生成し、Registryに登録。charaDefsを生成。
ロード完了後、this.scene.launch('SystemScene', { initialGameData: {...} })を呼び出し、SystemSceneに初期ゲーム起動を委譲。自身はstop()する。
SystemScene: PreloadSceneからlaunchされる。
init(data)でinitialGameData（charaDefs, startScenario）を受け取る。
create()内でUISceneをlaunchし、GameSceneをstartする。
GENERAL TRANSITION: SystemSceneが全てのシーン遷移（start, stop, launch）を管理する。他シーンからの直接的なscene.start/stop呼び出しは禁止。
KEY SCENE ROLES:
PreloadScene: Bootstrap. (ConfigManager, StateManagerの生成・登録、全アセットのロード、SystemSceneへの起動委譲)
SystemScene: Global Mediator & Scene Traffic Controller. (active: false, PreloadSceneからlaunchされる)。全てのシーン間通信イベント（request-scene-transition, return-to-novel）を処理。
UIScene: Persistent UI. (active: false, SystemSceneからlaunchされる)。SystemSceneによって表示/非表示(setVisible)と入力(input.enabled)が制御される。
GameScene: Novel Core. (active: false, SystemSceneからstartされる)。RegistryからStateManagerを取得。ScenarioManager等をインスタンス化。
ActionScene/BattleScene (Non-Novel Scene Examples): (active: false, SystemSceneからstartされる)。GameSceneからStateManagerの参照を受け取るか、Registryから直接取得する。
CRITICAL: 全てのシーンは**stop()/shutdown()メソッドを実装し、自身がcreate()で生成したPhaserオブジェクトとイベントリスナーを完全に破棄**する責務を持つ。
ASSET & DEFINITION FLOW:
asset_define.json: プライマリアセットマニフェスト。
charaDefs: PreloadSceneで生成され、SystemSceneのglobalCharaDefsに格納される。SystemSceneがGameSceneやNovelOverlaySceneを起動する際にデータとして渡される。
2.0 State Management & Data Flow (StateManager.js)
INHERITANCE: extends Phaser.Events.EventEmitter.
INSTANCE: Singleton. PreloadSceneで生成され、Phaser.Registryに登録される。
PROPERTIES:
this.f: (Object) ゲーム変数 (f.score)。
this.sf: (Object) システム変数 (sf.history)。
METHODS (CRITICAL):
setF(key: string, value: any): f変数を設定し、**this.emit('f-variable-changed', key, value)**を呼び出す。
eval(exp: string): JavaScript式expを実行する。実行前後のthis.fの状態を比較し、変更があったプロパティに対してthis.emit('f-variable-changed', key, value)を呼び出す。
getState(scenarioManager): 永続化のためのゲーム状態スナップショットを生成。
setState(loadedState): loadedStateからthis.fを復元。
HUD UPDATE PROTOCOL (CRITICAL):
UIコンポーネント（例: CoinHud, HpBar）は、自身のconstructorでStateManagerの参照を受け取り、this.stateManager.on('f-variable-changed', ...)を呼び出して自分自身でイベントを購読する。
GameSceneはHUDの更新ロジックを仲介しない。
UIコンポーネントは、自身のdestroy()メソッドで**イベント購読を解除 (off)**する責務を持つ。
3.0 Scene Transition & Input Control Protocol (SystemScene.js)
MECHANISM: イベント駆動。isProcessingTransitionフラグによる二重遷移防止。
INPUT CONTROL (CRITICAL):
シーン遷移開始時: **this.game.input.enabled = false;**でゲーム全体の入力を無効化。
遷移完了時: **this.game.input.enabled = true;**でゲーム全体の入力を再有効化。
TRANSITION FLOW (GameScene <-> BattleScene):
[jump storage="BattleScene"] -> handleJump -> 'request-scene-transition'イベント発行。
SystemSceneがイベント受信:
isProcessingTransitionをtrueにセット。
this.game.input.enabled = false;
this.scene.stop('GameScene')。
this.scene.get('UIScene').setVisible(false)。
this.scene.start('BattleScene', ...)。
BattleSceneのCREATEイベントをonceで待ち、isProcessingTransitionをfalseに、this.game.input.enabled = trueにリセット。
BattleSceneがendBattleを実行:
自身のStateManagerイベントリスナーをoff()する。
'return-to-novel'イベント発行。
自身をstop()するロジックは持たない（SystemSceneに任せる）。
SystemSceneが'return-to-novel'イベント受信:
isProcessingTransitionをtrueにセット。
this.game.input.enabled = false;
this.scene.stop('BattleScene')。
this.scene.get('UIScene').setVisible(true)。
this.scene.start('GameScene', ...)。
GameSceneのCREATEイベントをonceで待ち、さらにGameSceneが発行する'gameScene-load-complete'イベントをonceで待つ。
'gameScene-load-complete'受信後、isProcessingTransitionをfalseに、this.game.input.enabled = trueにリセット。GameSceneとUISceneのinput.enabledもtrueにする。
4.0 Save/Load Protocol (GameScene.js)
MECHANISM: GameSceneがperformSave/performLoadを担当。
performSave(slot): this.stateManager.getState()を呼び出し、localStorageに保存。
performLoad(slot, returnParams):
localStorageからロード。
this.stateManager.setState()でf変数を復元。
returnParamsがあれば、this.stateManager.eval()で適用。
rebuildScene()で視覚・論理状態を再構築。
CRITICAL: performLoadの処理が全て完了した時点で、SystemSceneに**this.scene.get('SystemScene').events.emit('gameScene-load-complete');**を呼び出し、遷移完了を通知する。
UI UPDATE GATING (CRITICAL):
GameSceneはisSceneFullyReadyフラグを持つ。
init()でfalseにリセット。performLoad完了後、または初回起動時にtrueにセット。
updateループ内のHUD更新ロジック（もし残っていれば）は、if (!this.isSceneFullyReady) return;でガードされる。
53.8s
