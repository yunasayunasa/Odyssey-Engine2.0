# Odyssey Engine v1.0

Odyssey Engineは、Phaser 3の強力なグラフィック表現と柔軟性を備えつつ、ティラノスクリプトのような直感的で手軽なスクリプト記述でノベルゲームを制作できるハイブリッドエンジンです。数々の困難なデバッグを経て、堅牢な状態管理とシーン連携を実現しました。

## 🚀 主な特徴と機能

-   **Phaser 3の表現力**: キャラクターアニメーション、カメラエフェクト、背景動画など、Phaserのパワフルな機能をタグで制御。
-   **ティラノスクリプト風のシンプル記述**: `[chara_show]`, `[p]`, `[eval]`など、直感的なタグでシナリオを記述。
-   **完全な状態セーブ＆ロード**:
    -   ゲーム内変数 (`f.*`)、システム変数 (`sf.*`) の永続化と復元。
    -   シナリオの進行状況 (`currentFile`, `currentLine`)、条件分岐スタック (`ifStack`)、サブルーチン呼び出し履歴 (`callStack`) の正確な復元。
    -   **選択肢表示中の状態**を含む、UIの論理状態の完全な保持と再表示。
    -   背景、キャラクター、BGMの視覚・聴覚状態の完璧な復元。
-   **堅牢なシーン間連携**:
    -   `[call]`と`[return]`によるノベルシナリオ内のサブルーチン呼び出し。
    -   `[jump]`による別ノベルシナリオファイルへの遷移、またはPhaserの別シーン（例：アクションパート）へのシームレスな遷移。
    -   オーバーレイ（重ねて表示されるノベルパート）機能による、ゲーム性との高度な融合。
    -   シーン遷移時の**自動オートセーブ・ロード機能**により、プレイヤー体験を損なわない。
-   **安定したゲームループ**: 全てのタグ（同期・非同期問わず）が`Promise`を返すことで、`while`ループベースのシナリオ実行システムが、いかなるシナリオでもフリーズすることなく安定動作。
-   **応答性の高いUI**: クリック待ちアイコン、自動スキップモード、オートモード。

## 🛠️ セットアップと使用方法

1.  **Phaserプロジェクトの準備**:
    Phaser 3（v3.60.0以降推奨）のプロジェクトをセットアップします。

2.  **エンジンファイルの配置**:
    `src/core/`, `src/handlers/`, `src/ui/` ディレクトリ配下のファイルを、あなたのPhaserプロジェクトの対応するパスに配置します。

3.  **アセットの準備**:
    `assets/` フォルダに、`asset_define.json` で定義された画像、音声、動画、そして`.ks`シナリオファイルを配置します。
    -   `assets/asset_define.json`: 各アセットのパスとキーを定義。
    -   `assets/scene1.ks`, `assets/scene2.ks`: 使用するシナリオファイル。
    -   `assets/chara_yuna_normal.png` など: キャラクター、背景、UIアセット。

4.  **`main.js`の設定**:
    `Phaser.Game`の`config.scene`リストに、Odyssey Engineの全てのシーンを登録します。

    ```javascript
    // main.js の例
    import PreloadScene from './scenes/PreloadScene.js';
    import GameScene from './scenes/GameScene.js';
    import UIScene from './scenes/UIScene.js';
    import SystemScene from './scenes/SystemScene.js';
    import SaveLoadScene from './scenes/SaveLoadScene.js';
    import LoadingScene from './scenes/LoadingScene.js';
    import NovelOverlayScene from './scenes/NovelOverlayScene.js';
    import ActionScene from './scenes/ActionScene.js'; // 別ジャンルゲームシーンの例

    const config = {
        type: Phaser.AUTO,
        width: 1280,
        height: 720,
        scale: {
            mode: Phaser.Scale.FIT,
            autoCenter: Phaser.Scale.CENTER_BOTH
        },
        scene: [
            PreloadScene,
            GameScene,
            UIScene,
            SystemScene,
            SaveLoadScene,
            LoadingScene,
            NovelOverlayScene,
            ActionScene // 開発する別ジャンルゲームシーンを追加
        ]
    };

    const game = new Phaser.Game(config);
    ```

5.  **シナリオ記述**:
    `.ks`ファイルに、以下の主要タグを使って物語を記述します。

    -   **表示・演出**: `[chara_show]`, `[chara_hide]`, `[chara_mod]`, `[move]`, `[walk]`, `[shake]`, `[vibrate]`, `[flip]`, `[bg]`, `[image]`, `[freeimage]`, `[playbgm]`, `[stopbgm]`, `[playse]`, `[fadein]`, `[fadeout]`, `[video]`, `[stopvideo]`
    -   **ゲームロジック**: `[eval]`, `[log]`, `[if]`, `[elsif]`, `[else]`, `[endif]`
    -   **フロー制御**: `[p]`, `[cm]`, `[er]`, `[wait]`, `[delay]`, `[link]`, `[button]`
    -   **シーン・ファイル遷移**: `[call]`, `[return]`, `[jump]`
    -   **特殊**: `[s]` (シナリオ停止), `[overlay_end]` (NovelOverlaySceneでのみ使用)

## ✍️ エンジンのカスタマイズと拡張

Odyssey Engineは、高い柔軟性を持って設計されています。しかし、安定性を保つためには、触って良い部分と触ってはいけない部分があります。

### ✅ **安全にカスタマイズできる部分**

-   **シナリオファイル (`.ks`ファイル)**: ゲームの物語を自由に記述・変更してください。
-   **アセット (`assets/`)**: 画像、音声、動画、フォントなど、ゲームに必要なアセットを追加・変更してください。
-   **`asset_define.json`**: 使用するアセットのパスとキーを定義してください。
-   **`GameScene.js`の`init`メソッド**:
    -   `this.startScenario`: ゲーム開始時に読み込むメインシナリオのファイル名。
    -   `this.startLabel`: 開始ラベル（省略可能）。
-   **`ConfigManager.js`のデフォルト値**: 音量やテキスト速度などの初期設定値を変更できます。
-   **UIの見た目 (`MessageWindow.js`, `UIScene.js`など)**: ウィンドウのデザイン、ボタンのスタイル、バックログの表示方法などを変更できます。
-   **既存タグへの新たなパラメータの追加**: 既存のハンドラファイルを改修し、新しいパラメータを解釈・利用するように拡張できます。（例: `[chara_show]`に`scale`属性を追加）
-   **新規タグの追加**: `handlers/`ディレクトリに新しいファイルを作成し、`GameScene.js`の`create`メソッドで`scenarioManager.registerTag()`を呼び出すことで、新しいタグを自由に追加できます。

### ⚠️ **変更には注意が必要な部分**

-   **`src/core/`ディレクトリ以下のファイル**:
    -   `ScenarioManager.js` (ゲームループ、シナリオ解析、フロー制御)
    -   `StateManager.js` (変数管理、セーブデータ生成)
    -   `SoundManager.js` (音声再生ロジック)
    -   `ConfigManager.js` (設定管理)
    -   `Layout.js` (画面レイアウト定義)
    **これらのファイルはエンジンの心臓部であり、ロジックの変更はエンジンの不安定化や予期せぬバグを引き起こす可能性があります。** 既存のメソッドの呼び出し方を変えたり、新しいメソッドを追加したりする際は、データフローや状態管理への影響を慎重に検討してください。
-   **`src/handlers/`ディレクトリ以下のファイル**:
    -   各タグのハンドラ (`handleCharaShow.js`, `handleEval.js`など)
    **これらのファイルは、タグの挙動を定義する重要な部分です。** ロジックを変更する際は、`Promise`を返すというルール、および`StateManager`を直接操作しないというルールを厳守してください。
-   **`SystemScene.js`**:
    -   シーン間の遷移ロジック（`request-scene-transition`, `return-to-novel`, `request-overlay`, `end-overlay`のイベントリスナー）。
    **このシーンは、複数のシーン間の交通整理を行うハブです。** ここを不適切に変更すると、シーン遷移が機能しなくなったり、ゲームがフリーズしたりする可能性があります。
-   **`GameScene.js`のメインロジック**:
    -   `create()`メソッドにおけるマネージャーの初期化、レイヤーの`depth`設定。
    -   `performSave()`および`performLoad()`メソッド。
    -   `displayChoiceButtons()`および`clearChoiceButtons()`メソッド。
    **これらのメソッドは、エンジンの基盤となる部分であり、特にセーブ＆ロードやUIの表示ロジックは非常にデリケートです。** 変更する際は、既存のデータフローと`depth`の仕組みを理解した上で行ってください。
-   **`NovelOverlayScene.js`**:
    -   オーバーレイ表示の基盤ロジック。
    **このシーンは、`ActionScene`のような他のシーンの上に「重ねて」ノベルを表示するための特殊なシーンです。** その性質上、入力ブロッカーの管理やシーンのライフサイクルが複雑であるため、変更は慎重に行ってください。
