Odyssey Engine v1.1 README (改訂版 - main.jsの記述を修正)
Odyssey Engine v1.1
Odyssey Engineは、Phaser 3の強力なグラフィック表現と柔軟性を備えつつ、ティラノスクリプトのような直感的で手軽なスクリプト記述でノベルゲームを制作できるハイブリッドエンジンです。数々の困難なデバッグを経て、SystemSceneを中心とした堅牢なシーン遷移管理と、StateManagerによるグローバルな状態管理を実現しました。

🚀 主な特徴と機能
Phaser 3の表現力: キャラクターアニメーション、カメラエフェクト、背景動画など、Phaserのパワフルな機能をタグで制御。
ティラノスクリプト風のシンプル記述: [chara_show], [p], [eval]など、直感的なタグでシナリオを記述。
完全な状態セーブ＆ロード:
ゲーム内変数 (f.*)、システム変数 (sf.*) の永続化と復元。
シナリオの進行状況 (currentFile, currentLine)、条件分岐スタック (ifStack)、サブルーチン呼び出し履歴 (callStack) の正確な復元。
選択肢表示中の状態を含む、UIの論理状態の完全な保持と再表示。
背景、キャラクター、BGMの視覚・聴覚状態の完璧な復元。
堅牢なシーン間連携 (SystemSceneによる中央集権管理):
[call]と[return]によるノベルシナリオ内のサブルーチン呼び出し。
[jump storage="SceneKey"]による、Phaserの別シーン（例：バトルパート、パズルパート）へのシームレスな遷移。
シーン遷移時の自動オートセーブ・ロード機能により、プレイヤー体験を損なわない。
オーバーレイ機能による、ゲームパートの上にノベルパートを重ねて表示する高度な演出。
安定したゲームループ: 全てのタグ（同期・非同期問わず）がPromiseを返すことで、whileループベースのシナリオ実行システムが、いかなるシナリオでもフリーズすることなく安定動作。
応答性の高いUI: クリック待ちアイコン、自動スキップモード、オートモード。
🛠️ セットアップと使用方法
Phaserプロジェクトの準備:
Phaser 3（v3.60.0以降推奨）のプロジェクトをセットアップします。
エンジンファイルの配置:
src/core/, src/handlers/, src/ui/, src/scenes/ ディレクトリ配下のエンジンコアファイルを、あなたのPhaserプロジェクトの対応するパスに配置します。
アセットの準備:
assets/ フォルダに、asset_define.json で定義された画像、音声、動画、そして.ksシナリオファイルを配置します。
assets/asset_define.json: 各アセットのパスとキーを定義。
assets/scene1.ks, assets/scene2.ks: 使用するシナリオファイル。
assets/chara_yuna_normal.png など: キャラクター、背景、UIアセット。
main.jsと各シーンのconstructorの設定 (重要):
Phaser.Gameのconfig.sceneリストに、Odyssey Engineの全てのシーンを直接クラス名で登録します。そして、**PreloadSceneのconstructorのみactive: true**とし、他のシーンはactive: false（またはactiveプロパティを省略）に設定します。
main.js の例:
Generated javascript
import PreloadScene from './scenes/PreloadScene.js';
import SystemScene from './scenes/SystemScene.js';
import UIScene from './scenes/UIScene.js';
import GameScene from './scenes/GameScene.js';
import SaveLoadScene from './scenes/SaveLoadScene.js';
import ActionScene from './scenes/ActionScene.js'; // 別ジャンルゲームシーンの例

const config = {
    type: Phaser.AUTO,
    width: 1280,
    height: 720,
    scale: { /* ... */ },
    scene: [
        PreloadScene,
        SystemScene,
        UIScene,
        GameScene,
        SaveLoadScene,
        ActionScene // 開発する別ジャンルゲームシーンを追加
    ]
};

const game = new Phaser.Game(config);
Use code with caution.
JavaScript
各シーンのconstructorの例:
Generated javascript
// src/scenes/PreloadScene.js
export default class PreloadScene extends Phaser.Scene {
    constructor() {
        // ★★★ このシーンのみ active: true を設定 ★★★
        super({ key: 'PreloadScene', active: true }); 
    }
    // ...
}
Use code with caution.
JavaScript
Generated javascript
// src/scenes/SystemScene.js
export default class SystemScene extends Phaser.Scene {
    constructor() {
        // ★★★ 他のシーンは active: true を設定しない ★★★
        super({ key: 'SystemScene' }); 
    }
    // ...
}
Use code with caution.
JavaScript
シナリオ記述:
.ksファイルに、以下の主要タグを使って物語を記述します。
表示・演出: [chara_show], [bg], [image], [playbgm], [playse], [fadein], [fadeout], [video]
ゲームロジック: [eval], [if], [elsif], [else], [endif]
フロー制御: [p], [wait], [link], [button]
シーン・ファイル遷移: [call], [return], [jump storage="SceneKey"]
特殊: [s] (シナリオ停止), [overlay_end] (NovelOverlaySceneでのみ使用)
✍️ エンジンのカスタマイズと拡張
Odyssey Engineは、高い柔軟性を持って設計されています。安定性を保つため、以下のガイドラインに従ってカスタマイズしてください。

✅ 安全にカスタマイズできる部分 (推奨される拡張ポイント)
シナリオファイル (.ksファイル): ゲームの物語を自由に記述・変更してください。
アセット (assets/): 画像、音声、動画、フォントなど、ゲームに必要なアセットを追加・変更してください。
asset_define.json: 使用するアセットのパスとキーを定義してください。
新規ゲームシーンの追加 (例: PuzzleScene.js):
BattleScene.js や ActionScene.js をテンプレートとして、新しいシーンファイルを作成します。
stop()/shutdown()メソッドを必ず実装し、そのシーンがcreate()で生成した全てのPhaserオブジェクトとイベントリスナーを破棄するようにしてください。
SystemSceneへの遷移リクエストは、eventEmittedフラグとdisableInteractive()で二重発行を防止してください。
UIの見た目 (MessageWindow.js, UIScene.jsなど): ウィンドウのデザイン、ボタンのスタイル、バックログの表示方法などを変更できます。
CoinHud.jsやHpBar.jsを参考に、StateManagerを直接購読する新しいHUDコンポーネントを作成できます。
新規タグの追加: handlers/ディレクトリに新しいファイルを作成し、GameScene.jsのcreateメソッドでscenarioManager.registerTag()を呼び出すことで、新しいタグを自由に追加できます。
⚠️ 変更には注意が必要な部分 (エンジンのコア)
src/core/ディレクトリ以下のファイル (特にStateManager.js):
StateManager.jsは、ゲーム全体で唯一の状態管理のソースです。evalやsetFメソッドの挙動を不用意に変更すると、HUDの更新やセーブデータに影響が出る可能性があります。
src/scenes/SystemScene.js:
シーン間の遷移ロジックと、isProcessingTransitionフラグによる競合防止機能が集中しています。ここを不適切に変更すると、シーン遷移が機能しなくなったり、ゲームがフリーズしたりする可能性があります。
src/scenes/PreloadScene.js:
ゲームの起動シーケンス（ConfigManager, StateManagerの初期化、SystemSceneとUISceneのlaunch）を担っています。この順序を変更すると、ゲームが起動しなくなる可能性があります。
各シーンのライフサイクル管理 (constructor, init, create, stop/shutdown):
stop()/shutdown()メソッド: このメソッドは、シーンが破棄される際に必ず呼ばれ、リソースをクリーンアップする非常に重要な役割を担います。ここでのリソース破棄漏れは、「ゾンビ」リスナーやメモリリークの直接的な原因となります。
constructorとinit: ここでは重い処理や、まだ存在しない他のシーンへのアクセスを行うべきではありません。
GameScene.jsのperformLoad()とrebuildScene():
セーブ＆ロード機能の心臓部です。変更する際は、StateManagerから復元したデータと、ScenarioManagerや表示オブジェクトの状態を正確に同期させる必要があります。
